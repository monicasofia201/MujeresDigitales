{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USUARIO\\\\Documents\\\\GitHub\\\\MujeresDigitales\\\\talleres\\\\03_taller_react\\\\react03mon\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\n\n// Componente principal: App\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.manejarDesmontaje = () => {\n      this.setState({\n        mostrarCicloDeVida: false\n      });\n    };\n    this.state = {\n      mostrarCicloDeVida: true\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Ejercicios de Estado y Ciclo de Vida en React 03 Mon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Contador, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), this.state.mostrarCicloDeVida && /*#__PURE__*/_jsxDEV(CicloDeVida, {\n        onUnmount: this.manejarDesmontaje\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 43\n      }, this), /*#__PURE__*/_jsxDEV(ComponenteCombinado, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n/*\n--- Ejercicio 1: Contador simple ---\nCrea un componente que muestre un contador. Al hacer clic en un botón, el contador debe incrementarse.\n\nObjetivo: Que los estudiantes entiendan cómo funciona this.state y el método setState para actualizar el estado.\n*/\n\n// Ejercicio 1: Contador simple\nclass Contador extends Component {\n  constructor(props) {\n    super(props);\n    this.incrementarContador = () => {\n      this.setState({\n        contador: this.state.contador + 1\n      });\n    };\n    this.state = {\n      contador: 0\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"component\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contador Simple\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"counter-display\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: this.state.contador\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: this.incrementarContador,\n        children: \"Incrementar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n/*\n--- Ejercicio 2: Ciclo de vida de un componente ---\nCrea un componente que muestre un mensaje en la consola cuando se monte, actualice y desmonte.\n\nObjetivo: Que los estudiantes practiquen los métodos del ciclo de vida y vean cómo responden a cambios de estado.\n*/\n\nclass CicloDeVida extends Component {\n  constructor(props) {\n    super(props);\n    this.incrementarValor = () => {\n      this.setState({\n        valor: this.state.valor + 1\n      });\n    };\n    this.desmontarComponente = () => {\n      // Lógica para desmontar el componente (esto debe estar controlado por el componente padre)\n      this.props.onUnmount();\n    };\n    this.state = {\n      valor: 0\n    };\n  }\n  componentDidMount() {\n    console.log('2.1. El componente se ha MONTADO - Ejercicio #2');\n  }\n  componentDidUpdate(prevProps, prevState) {\n    console.log('2.2. El componente se ha ACTUALIZADO - Ejercicio #2');\n  }\n  componentWillUnmount() {\n    console.log('2.3. El componente se DESMONTARÁ - Ejercicio #2');\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"component\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Ciclo de Vida del Componente\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"counter-display\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: this.state.valor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: this.incrementarValor,\n        children: \"Incrementar Valor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: this.desmontarComponente,\n        children: \"Desmontar Componente\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n/*\nInstrucciones:\n1. Realiza ambos ejercicios en tu entorno de desarrollo. Intenta modificar el código para explorar cómo funcionan setState y los métodos del ciclo de vida.\n2. Observa los mensajes en la consola cuando el componente se monta, actualiza y se desmonta.\n3. Opcional: Crea un tercer componente que combine lo aprendido sobre setState y ciclo de vida (por ejemplo, un componente que cambie un valor cuando se actualice).\n*/\n\nclass ComponenteCombinado extends Component {\n  constructor(props) {\n    super(props);\n    this.incrementarContador = () => {\n      this.setState({\n        contador: this.state.contador + 1\n      });\n    };\n    this.state = {\n      contador: 0\n    };\n  }\n  componentDidMount() {\n    console.log('3.1. El componente combinado se ha MONTADO - Ejercicio #3');\n  }\n  componentDidUpdate(prevProps, prevState) {\n    console.log('3.2. El componente combinado se ha ACTUALIZADO - Ejercicio #3');\n  }\n  componentWillUnmount() {\n    console.log('3.3. EL componente combinado se DESMONTARÁ - Ejercicio #3');\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"component\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Componente Combinado\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"counter-display\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: this.state.contador\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: this.incrementarContador,\n        children: \"Incrementar Combinado\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","jsxDEV","_jsxDEV","App","constructor","props","manejarDesmontaje","setState","mostrarCicloDeVida","state","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Contador","CicloDeVida","onUnmount","ComponenteCombinado","incrementarContador","contador","onClick","incrementarValor","valor","desmontarComponente","componentDidMount","console","log","componentDidUpdate","prevProps","prevState","componentWillUnmount"],"sources":["C:/Users/USUARIO/Documents/GitHub/MujeresDigitales/talleres/03_taller_react/react03mon/src/App.js"],"sourcesContent":["import React, { Component } from 'react';\nimport './App.css'; \n\n// Componente principal: App\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mostrarCicloDeVida: true,\n    };\n  }\n\n  manejarDesmontaje = () => {\n    this.setState({ mostrarCicloDeVida: false });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Ejercicios de Estado y Ciclo de Vida en React 03 Mon</h1>\n        <Contador />\n        {this.state.mostrarCicloDeVida && <CicloDeVida onUnmount={this.manejarDesmontaje} />}\n        <ComponenteCombinado />\n      </div>\n    );\n  }\n}\n\n\n/*\n--- Ejercicio 1: Contador simple ---\nCrea un componente que muestre un contador. Al hacer clic en un botón, el contador debe incrementarse.\n\nObjetivo: Que los estudiantes entiendan cómo funciona this.state y el método setState para actualizar el estado.\n*/\n\n// Ejercicio 1: Contador simple\nclass Contador extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      contador: 0\n    };\n  }\n\n  incrementarContador = () => {\n    this.setState({ contador: this.state.contador + 1 });\n  };\n\n  render() {\n    return (\n      <div className=\"component\">\n        <h2>Contador Simple</h2>\n        <div className=\"counter-display\">\n          <h3>{this.state.contador}</h3>\n        </div>\n        <button className=\"btn\" onClick={this.incrementarContador}>\n          Incrementar\n        </button>\n      </div>\n    );\n  }\n}\n\n\n/*\n--- Ejercicio 2: Ciclo de vida de un componente ---\nCrea un componente que muestre un mensaje en la consola cuando se monte, actualice y desmonte.\n\nObjetivo: Que los estudiantes practiquen los métodos del ciclo de vida y vean cómo responden a cambios de estado.\n*/\n\nclass CicloDeVida extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      valor: 0\n    };\n  }\n\n  componentDidMount() {\n    console.log('2.1. El componente se ha MONTADO - Ejercicio #2');\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log('2.2. El componente se ha ACTUALIZADO - Ejercicio #2');\n  }\n\n  componentWillUnmount() {\n    console.log('2.3. El componente se DESMONTARÁ - Ejercicio #2');\n  }\n\n  incrementarValor = () => {\n    this.setState({ valor: this.state.valor + 1 });\n  };\n\n  desmontarComponente = () => {\n    // Lógica para desmontar el componente (esto debe estar controlado por el componente padre)\n    this.props.onUnmount();\n  };\n\n  render() {\n    return (\n      <div className=\"component\">\n        <h2>Ciclo de Vida del Componente</h2>\n        <div className=\"counter-display\">\n          <h3>{this.state.valor}</h3>\n        </div>\n        <button className=\"btn\" onClick={this.incrementarValor}>\n          Incrementar Valor\n        </button>\n        <button className=\"btn\" onClick={this.desmontarComponente}>\n          Desmontar Componente\n        </button>\n      </div>\n    );\n  }\n}\n\n\n/*\nInstrucciones:\n1. Realiza ambos ejercicios en tu entorno de desarrollo. Intenta modificar el código para explorar cómo funcionan setState y los métodos del ciclo de vida.\n2. Observa los mensajes en la consola cuando el componente se monta, actualiza y se desmonta.\n3. Opcional: Crea un tercer componente que combine lo aprendido sobre setState y ciclo de vida (por ejemplo, un componente que cambie un valor cuando se actualice).\n*/\n\nclass ComponenteCombinado extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      contador: 0\n    };\n  }\n\n  componentDidMount() {\n    console.log('3.1. El componente combinado se ha MONTADO - Ejercicio #3');\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log('3.2. El componente combinado se ha ACTUALIZADO - Ejercicio #3');\n  }\n\n  componentWillUnmount() {\n    console.log('3.3. EL componente combinado se DESMONTARÁ - Ejercicio #3');\n  }\n\n  incrementarContador = () => {\n    this.setState({ contador: this.state.contador + 1 });\n  };\n\n  render() {\n    return (\n      <div className=\"component\">\n        <h2>Componente Combinado</h2>\n        <div className=\"counter-display\">\n          <h3>{this.state.contador}</h3>\n        </div>\n        <button className=\"btn\" onClick={this.incrementarContador}>\n          Incrementar Combinado\n        </button>\n      </div>\n    );\n  }\n}\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}